#include "navigation.h"
#include "ui_navigation.h"
#include"graph.h"
#include"QtDebug"
#include"QFile"
#include"QMessageBox"
#include<QMouseEvent>
#include<QPushButton>
#include<QSignalMapper>
#include "modify_point.h"
#include"mainmenu.h"
#include"QTextStream"

navigation::navigation(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::navigation)
{
    modify_point_int=-1;
    point_1=point_2=0;
    flag=false;
    has_click=0;
    ui->setupUi(this);
    start_nav=false;
    //初始化所有的导航高亮的点 save——point
    for(int i=0;i<100;i++)
        save_point[i]=-1;//-1表示无
}

navigation::~navigation()
{
    delete ui;
}
//导航
void navigation::searchpath(int num){
    int v, w, i, t;  // i、w和v为计数变量
        int final[NUM+1];
        int min;
        for (v = 0; v<NUM; v++)
        {
            final[v] = 0;  // 假设从顶点num到顶点v没有最短路径
            D[v] = assist[num][v];// 将与之相关的权值放入D中存放
            for (w = 0; w<NUM; w++) // 设置为空路径
                P[v][w] = 0;
            if (D[v]<30000)  // 存在路径
            {
                P[v][num] = 1; // 存在标志置为一
                P[v][v] = 1; // 自身到自身
            }
        }

        D[num] = 0;
        final[num] = 1;      // 初始化num顶点属于S集合
                             // 开始主循环，每一次求得num到某个顶点的最短路径，并将其加入到S集合
        for (i = 0; i<NUM; ++i)     // 其余G.vexnum-1个顶点
        {
            min = Max;     // 当前所知离顶点num的最近距离
            for (w = 0; w<NUM; ++w)
                if (!final[w])    // w顶点在v-s中
                    if (D[w]<min)   // w顶点离num顶点更近
                    {
                        v = w;
                        min = D[w];
                    }

                final[v] = 1;   // 离num顶点更近的v加入到s集合
            for (w = 0; w<NUM; ++w)  // 更新当前最短路径极其距离
                if (!final[w] && ((min + assist[v][w])<D[w]))// 不在s集合，并且比以前所找到的路径都短就更新当前路径 //
                {
                    D[w] = min + assist[v][w];
                    for (t = 0; t<NUM; t++)
                        P[w][t] = P[v][t];
                    P[w][w] = 1;
                }
        }
}
void navigation::shortest(){
    int v0,v1;
    v0=point_1,v1=point_2;
    //如果输入起点和结束都一样跳出
    if(v0==v1){
        QMessageBox::warning(this,
                        tr("您配吗？"),
                        tr("起点和结束点一致"),
                           QMessageBox::Yes);
    }
    qDebug()<<v0<<v1;

    for (int i = 0; i < 100; i++)
        {
            for (int j = 0; j < 100; j++)
            {
                assist[i][j] = gra.G.arcs[i][j].distans;
            }
        }
    searchpath(v0);
    output(v0,v1);
    //高亮
    start_nav=true;

}
void navigation::output(int target1, int target2){
    int a, b, c, d, q = 0;
    a = target2;    // 将目标二赋值给a
    if (a != target1)    // 如果目标二不和目标一输入重合，则进行...
    {
        if (D[a] != 30000)
        {

            qDebug() << "从" << gra.G.vex[target1].name << "到" << gra.G.vex[target2].name << "的最短路径是" << endl;// 输出提示信息

            //保存起始点到高亮数组的开头
            save_point[0]=target1;
            //qDebug()<<save_point[0];

            qDebug() << D[a] << endl;  // 输出target1到target2的最短路径长度，存放在D[]数组中
            qDebug() << gra.G.vex[target1].name;   // 输出目标一的名称
            d = target1;      // 将目标一的编号赋值给d
            for (c = 0; c < NUM; ++c)
            {
                int k=1;
            gate:;        // 标号，可以作为goto语句跳转的位置
                P[a][target1] = 0;
                for (b = 0; b < NUM; b++)
                {
                    if (assist[d][b] < 30000 && P[a][b])  // 如果目标一和它的一个临界点之间存在路径且最短路径
                    {
                        qDebug() << "--" << gra.G.vex[b].number;  // 输出此节点的名称
                        //经过的点保存到后面的数组
                        save_point[k]=b;
                        qDebug()<<"**"<<save_point[k];
                        k++;

                        //q = q + 1;     // 计数变量加一，满8控制输出时的换行
                        P[a][b] = 0;
                        d = b;     // 将b作为出发点进行下一次循环输出，如此反复
                        //if (q % 8 == 0) printf("\n");
                        goto gate;
                    }
                }
            }
        }
        else
        {
            qDebug() <<"找不到到达目标的道路"<< endl;
        }
    }
}



    //返回值
void navigation::on_back_clicked()
{
    //返回值
    accept();
//    close();
//    MainMenu man;
//    man.exec();
}
//保存数据
void navigation::saveData(QList<QString> a){
    gra.G.vexnum=a.length();//定点数
    for(int i=0;i<a.length();i++){
        QList<QString> save_list=a.at(i).split(' ');
       // qDebug()<<save_list;
        int inde = save_list.at(0).toInt();
       // qDebug()<<save_list.at(3).toInt();
         if(save_list.length()<4){}else{
           //qDebug()<<inde<<save_list.at(3).toInt()<<save_list.at(4).toInt()<<save_list.at(2).toInt()<<save_list.at(1);
             gra.G.vex[inde].x=save_list.at(3).toInt();
             gra.G.vex[inde].y=save_list.at(4).toInt();
             gra.G.vex[inde].type=save_list.at(2).toInt();
             gra.G.vex[inde].number=inde;
             gra.G.vex[inde].name=save_list.at(1);
         }

    }
}
void navigation::saveRoad(QList<QString> a){
    gra.G.arcnum=a.length();//边数

    for(int i=0;i<a.length();i++){
        QList<QString> save_list=a.at(i).split(' ');
        if(save_list.length()<4){}//如果小于4不输出 防止文件录入少了数据
        else{
            gra.G.arcs[save_list.at(0).toInt()][save_list.at(1).toInt()].distans=save_list.at(2).toInt();
            gra.G.arcs[save_list.at(1).toInt()][save_list.at(0).toInt()].distans=save_list.at(2).toInt();
            gra.G.arcs[save_list.at(0).toInt()][save_list.at(1).toInt()].type=save_list.at(3).toInt();
            gra.G.arcs[save_list.at(1).toInt()][save_list.at(0).toInt()].type=save_list.at(3).toInt();
           qDebug()<<gra.G.arcs[save_list.at(0).toInt()][save_list.at(1).toInt()].distans<<gra.G.arcs[save_list.at(0).toInt()][save_list.at(1).toInt()].type;
        }
    }
}
void navigation::readData(){

    QFile file("point.txt");
    QFile file2("road.txt");
    if(!file.open(QFile::ReadOnly|QFile::Text)||!file2.open(QFile::ReadOnly|QFile::Text)){
                QMessageBox::warning(this,
                        tr("您配吗？"),
                        tr("您配吗？"),
                           QMessageBox::Yes);
   }else{
////打开成功
    QString str=file.readAll();
    QString str2=file2.readAll();
    QList<QString> list=str.split('\n');
    QList<QString> list2=str2.split('\n');
    qDebug()<<list<<list2;
    saveData(list);
    saveRoad(list2);
   }

   file2.close();
   file.close();
   return  ;
}
//画顶点
//按键事件 导航
void navigation::nav_click(int i){

        modify_point_int=i;//保存修改的点

        if(has_click==0){//第一次 记录第一个点
            //重置保存的顶点
            for(int k=0;k<100;k++) save_point[k]=-1;
            start_nav=false;//取消刷新
            point_1=i;
            QMessageBox::information(this,
                    tr("您配吗？"),
                    tr("选取第一个点"),
                       QMessageBox::Yes);
           // qDebug()<<point_1;
        }
        if(has_click==1){//记录第二个点
            point_2=i;
            has_click=-1;//重置
            modify_point_int=-1;//重置
            QMessageBox::information(this,
                    tr("您配吗？"),
                    tr("选取第二个点"),
                       QMessageBox::Yes);
            shortest();//出发导航

}else{}

            has_click++;
          //qDebug()<<i<<has_click;
}
void navigation::drawPoint(QPainter *p,int type,int x,int y,int i){
              //按钮事件
    if(type==0)return;
        QSignalMapper *Qmap;
        Qmap =new QSignalMapper();
        QPushButton *ptb;//按钮指针
        QIcon icon("circle.png"),icon_shop("shop.png"),icon_rect("rect.png");
        ptb =new QPushButton(this);

         switch (type) {
         case 1:
            ptb->setIcon(icon);
             break;
         case 2:
             ptb->setIcon(icon_rect);
             break;
         case 3:
             ptb->setIcon(icon_shop);
             break;
         default:
             break;
         }
         //事件时间
         connect(ptb,SIGNAL(clicked()),Qmap,SLOT(map()));//连接转接器
         ptb->setIconSize(QSize(20,20));
         ptb->setFlat(true);
         ptb->setGeometry(x*20+100-10,y*20+100-10,20,20);
         ptb->setVisible(true);
         Qmap->setMapping(ptb,i);
         connect(Qmap,SIGNAL(mapped(int)),this,SLOT(nav_click(int)));

    //}
}

//画路
void navigation::drawRoad(QPainter *p,int type,int x1,int y1,int x2,int y2){
     QPen pen;
    switch (type) {
    case 1://普通道路
        pen.setColor(QColor(0,0,0));
        pen.setWidth(2);
        break;
    case 2://高速公路
        pen.setColor(QColor(0,125,0));
        pen.setWidth(4);
        break;
    case 3:
        pen.setColor(QColor(0,0,125));
        pen.setWidth(10);
        break;
    default:

        break;
    }


    p->setPen(pen);
    p->drawLine(QPointF(x1*20+100, y1*20+100), QPointF(x2*20+100, y2*20+100));
}
void navigation:: paintEvent(QPaintEvent *){//画图函数
    QPainter painter(this);

     painter.drawLine(QPointF(0, 0), QPointF(1200,720));
    if(!flag){//每次打开只执行一次
          flag=true;
          readData();//读取数据 并且保存到图上
          //qDebug()<<"current applicationDirPath: "<<QCoreApplication::applicationDirPath();\


          for(int i=0;i<gra.G.vexnum;i++){
              if(gra.G.vex[i].type!=0){
                    drawPoint(&painter,gra.G.vex[i].type,gra.G.vex[i].x,gra.G.vex[i].y,i);
              }
          }
          //drawPoint(&painter,3,10,10);
    }

    int max=gra.max;
    for(int i=0;i<gra.max;i++){
       for(int j=0;j<max;j++){
           if(gra.G.arcs[i][j].type!=0){
              drawRoad(&painter,gra.G.arcs[i][j].type,gra.G.vex[i].x,gra.G.vex[i].y,gra.G.vex[j].x,gra.G.vex[j].y);//画道路
           }
       }
       max--;//只需要阅读一半的矩阵
   }
    //画顶点
    if(start_nav){
        //导航高亮

        for(int i=1;i< 100;i++){
         //qDebug()<<save_point[i-1]<<i;
         if(save_point[i]==-1){return;}//不存在跳出循环}

         drawRoad(&painter,3,gra.G.vex[save_point[i-1]].x,gra.G.vex[save_point[i-1]].y,gra.G.vex[save_point[i]].x,gra.G.vex[save_point[i]].y);//画道路

        }

    }
    QWidget::update();

}
//鼠标事件

//修改事件
void navigation::on_modify_clicked()
{
    if(modify_point_int==-1){
        return;
    }
    //修改
    modify_point *abs=new modify_point();
    abs->getMessage(gra,modify_point_int);
    abs->exec();

    modify_point_int=-1;//重置
    //传递消息
    //modify->getMessage(gra,"a",1,2);
    //modify->show();
}
//返回事件
void navigation::on_pushButton_clicked()
{
    accept();
}

void navigation::on_delet_clicked()
{
    //删除定点
    QFile file("road.txt");
    if(!file.open(QFile::ReadWrite|QFile::Text)){
        QMessageBox::warning(this,
                tr("您配吗？"),
                tr("打开失败"),
                   QMessageBox::Yes);
        close();
        return;
    }else{
        QTextStream stream(&file);
    }
}
